[{"D:\\Learning\\timelineproject\\src\\index.tsx":"1","D:\\Learning\\timelineproject\\src\\App.tsx":"2","D:\\Learning\\timelineproject\\src\\TimelineStage.tsx":"3","D:\\Learning\\timelineproject\\src\\TimelineProperty.tsx":"4","D:\\Learning\\timelineproject\\src\\Play.tsx":"5"},{"size":197,"mtime":1607173994349,"results":"6","hashOfConfig":"7"},{"size":2459,"mtime":1609792841466,"results":"8","hashOfConfig":"7"},{"size":11853,"mtime":1609982386113,"results":"9","hashOfConfig":"7"},{"size":5803,"mtime":1609873229848,"results":"10","hashOfConfig":"7"},{"size":1806,"mtime":1609704868004,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"12rsegs",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"D:\\Learning\\timelineproject\\src\\index.tsx",[],["25","26"],"D:\\Learning\\timelineproject\\src\\App.tsx",[],"D:\\Learning\\timelineproject\\src\\TimelineStage.tsx",[],"D:\\Learning\\timelineproject\\src\\TimelineProperty.tsx",["27"],"import Konva from \"konva\";\nimport { Group } from \"konva/types/Group\";\nimport { KonvaEventObject, Node } from \"konva/types/Node\"\nimport React, { Component, RefObject } from 'react'\nimport { Rect, Shape } from \"react-konva\"\nimport { IKeyframe } from \"./TimelineStage\";\n\ninterface TimelinePropertyProps\n{\n  handlePropertyDragEnd: (e: KonvaEventObject<DragEvent>, index: number, secondIndex: number) => void;\n  propertyIndex: number;\n  second: IKeyframe;\n  secondIndex: number;\n  zoom: number;\n  minPixelsInSecond: number;\n  leftCanvasMargin: number;\n  minPropertyYPos: number;\n  curveLineRef: RefObject<Konva.Line>;\n  nextKeyframe?: IKeyframe;\n  nextKeyframeId?: Node;\n  id: string;\n  groupArr: any[];\n}\n\nexport default class TimelineProperty extends Component<TimelinePropertyProps> {\n\n  private keyframeRef: RefObject<Konva.Rect> = React.createRef();\n  private control1: RefObject<Konva.Rect> = React.createRef();\n  private control2: RefObject<Konva.Rect> = React.createRef();\n\n  state = {\n    x: 0,\n    y: 0\n  }\n\n  private handleDragMove2 = (e: KonvaEventObject<DragEvent>) =>\n  {\n    console.log(\"e.target.getPosition()\", e.target.getPosition())\n    console.log(\"e.target.getAbsolutePosition()\", e.target.getAbsolutePosition())\n    console.log(\"{ x: e.target.x(), y: e.target.y() }\", { x: e.target.x(), y: e.target.y() })\n  }\n\n  //@ts-ignore\n  private calculateBezier = (p0, p1, p2, p3, t) => {\n    var ret = {};\n    var coords = ['x', 'y'];\n    var i, k;\n\n    for (i in coords) {\n        k = coords[i];\n        //@ts-ignore\n        ret[k] = Math.pow(1 - t, 3) * p0[k] + 3 * Math.pow(1 - t, 2) * t * p1[k] + 3 * (1 - t) * Math.pow(t, 2) * p2[k] + Math.pow(t, 3) * p3[k];\n    }\n\n    return ret;\n}\n\n  render()\n  {\n    const { handlePropertyDragEnd, propertyIndex, secondIndex, second, minPixelsInSecond, nextKeyframe, zoom, groupArr, id } = this.props;\n\n\n    return (\n      <>\n        {\n          nextKeyframe && (\n            <Shape\n              stroke={'yellow'}\n              strokeWidth={1}\n              offsetX={-10}\n              offsetY={10}\n              sceneFunc={(ctx, shape) =>\n              {\n                ctx.beginPath();\n                ctx.moveTo(this.keyframeRef?.current?.x(), this.keyframeRef?.current?.y());\n                ctx.bezierCurveTo(\n                  this.control1.current?.x() ?? 0,\n                  this.control1.current?.y() ?? 0,\n                  this.control2.current?.x() ?? 0,\n                  this.control2.current?.y() ?? 0,\n                  groupArr[propertyIndex][secondIndex + 1]?.keyframeRef?.current?.getPosition().x ?? 0,\n                  groupArr[propertyIndex][secondIndex + 1]?.keyframeRef?.current?.getPosition().y ?? 0\n                );\n                ctx.fillStrokeShape(shape);\n\n                const res: any = this.calculateBezier(\n                  {x: this.keyframeRef?.current?.x(), y: this.keyframeRef?.current?.y()},\n                  {x: this.control1.current?.x() ?? 0, y: this.control1.current?.y() ?? 0},\n                  {x: this.control2.current?.x() ?? 0, y: this.control2.current?.y() ?? 0},\n                  {x: groupArr[propertyIndex][secondIndex + 1]?.keyframeRef?.current?.getPosition().x ?? 0, y: groupArr[propertyIndex][secondIndex + 1]?.keyframeRef?.current?.getPosition().y ?? 0},\n                  0.01,\n                );\n\n                console.log(this.calculateBezier(\n                  {x: this.keyframeRef?.current?.x(), y: this.keyframeRef?.current?.y()},\n                  {x: this.control1.current?.x() ?? 0, y: this.control1.current?.y() ?? 0},\n                  {x: this.control2.current?.x() ?? 0, y: this.control2.current?.y() ?? 0},\n                  {x: groupArr[propertyIndex][secondIndex + 1]?.keyframeRef?.current?.getPosition().x ?? 0, y: groupArr[propertyIndex][secondIndex + 1]?.keyframeRef?.current?.getPosition().y ?? 0},\n                  1,\n                ))\n\n                this.setState({ x: res.x, y: res.y })\n              }}\n            />\n          )\n        }\n      <Rect\n          ref={this.keyframeRef}\n          x={this.state.x}\n          offsetX={20}\n          offsetY={5}\n          y={this.state.y}\n          width={10} height={10}\n          fill=\"pink\"\n        />\n\n        <Rect\n          ref={this.keyframeRef}\n          draggable\n          onDragEnd={(e: KonvaEventObject<DragEvent>) => handlePropertyDragEnd(e, propertyIndex, secondIndex)}\n          //onDragMove={this.handleDragMove}\n          dragBoundFunc={(pos) => ({ x: pos.x, y: pos.y })}\n          x={(second.second * (minPixelsInSecond * zoom))}\n          offsetX={20}\n          offsetY={5}\n          y={200 - (second.value * 50) + 10}\n          width={10} height={10}\n          fill=\"black\"\n          rotation={135}\n          id={id}\n        />\n\n        <Rect\n          ref={this.control1}\n          draggable\n          // onDragEnd={(e: KonvaEventObject<DragEvent>) => handlePropertyDragEnd(e, propertyIndex, secondIndex)}\n          //onDragMove={this.handleDragMove}\n          // dragBoundFunc={(pos) => ({ x: pos.x, y: pos.y })}\n          x={(second.second * (minPixelsInSecond * zoom))}\n          offsetX={10}\n          offsetY={0}\n          y={200 - (second.value * 50) + 10}\n          width={10} height={10}\n          fill=\"blue\"\n          rotation={135}\n          id={id}\n        />\n        <Rect\n          ref={this.control2}\n          draggable\n          // onDragEnd={(e: KonvaEventObject<DragEvent>) => handlePropertyDragEnd(e, propertyIndex, secondIndex)}\n          \n          // dragBoundFunc={(pos) => ({ x: pos.x, y: pos.y })}\n          x={(second.second * (minPixelsInSecond * zoom))}\n          \n          offsetY={0}\n          y={200 - (second.value * 50) + 10}\n          width={10} height={10}\n          fill=\"blue\"\n          rotation={135}\n          id={id}\n        />\n\n      </>\n    )\n  }\n}\n","D:\\Learning\\timelineproject\\src\\Play.tsx",["28"],"/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useState, useEffect } from \"react\";\n\nlet test: any;\n\nconst Play = () =>\n{\n  const [count, setCount] = React.useState(0);\n  const [active, setActive] = React.useState(false);\n\n  React.useLayoutEffect(() =>\n  {\n    const currPosition: number = count;\n\n    if (active)\n    {\n      let handler: any;\n\n      const currTime = new Date().getTime();\n\n      const animate = (_: number, currTime: number, currPos: number) =>\n      {\n\n        const runtime = new Date().getTime() - currTime;\n        const progress = (runtime / 1000) * 1;\n        \n        console.log(currPosition)\n        setCount((prev) => currPosition + 200 * progress);\n\n        handler = requestAnimationFrame((timestamp) => animate(timestamp, currTime, currPos));\n      };\n\n      handler = requestAnimationFrame((timestamp) => animate(timestamp, currTime, currPosition));\n\n      return () => cancelAnimationFrame(handler)\n    }\n\n\n  }, [active]);\n\n  return (\n    <div style={{ position: \"relative\" }}>\n      <div style={{ display: \"flex\" }}>\n        {Array.from(Array(10).keys()).map((i) => (\n          <div\n            style={{\n              transform: `translateX(${i * 200}px)`,\n              width: 1,\n              backgroundColor: \"red\",\n              height: 100\n            }}\n          ></div>\n        ))}\n        <div\n          style={{\n            transform: `translateX(${count}px)`,\n            width: 1,\n            backgroundColor: \"blue\",\n            height: 100,\n            left: 0,\n            position: \"absolute\"\n          }}\n        ></div>\n      </div>\n      <button onClick={() => setActive(true)}>start</button>\n      <button onClick={() => setActive(false)}>start</button>\n      {active ? \"TRUE\" : \"FALSE\"}\n    </div>\n  );\n};\n\nexport default Play;\n",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":2,"column":10,"nodeType":"35","messageId":"36","endLine":2,"endColumn":15},{"ruleId":"37","severity":1,"message":"38","line":39,"column":6,"nodeType":"39","endLine":39,"endColumn":14,"suggestions":"40"},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"@typescript-eslint/no-unused-vars","'Group' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook React.useLayoutEffect has a missing dependency: 'count'. Either include it or remove the dependency array.","ArrayExpression",["43"],"no-global-assign","no-unsafe-negation",{"desc":"44","fix":"45"},"Update the dependencies array to be: [active, count]",{"range":"46","text":"47"},[968,976],"[active, count]"]