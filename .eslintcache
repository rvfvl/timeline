[{"D:\\Learning\\timelineproject\\src\\index.tsx":"1","D:\\Learning\\timelineproject\\src\\App.tsx":"2","D:\\Learning\\timelineproject\\src\\TimelineStage.tsx":"3","D:\\Learning\\timelineproject\\src\\TimelineProperty.tsx":"4","D:\\Learning\\timelineproject\\src\\Play.tsx":"5"},{"size":197,"mtime":1607173994349,"results":"6","hashOfConfig":"7"},{"size":2459,"mtime":1609792841466,"results":"8","hashOfConfig":"7"},{"size":14033,"mtime":1612808774751,"results":"9","hashOfConfig":"7"},{"size":7699,"mtime":1612808769033,"results":"10","hashOfConfig":"7"},{"size":1806,"mtime":1609704868004,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"12rsegs",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"D:\\Learning\\timelineproject\\src\\index.tsx",[],["25","26"],"D:\\Learning\\timelineproject\\src\\App.tsx",[],"D:\\Learning\\timelineproject\\src\\TimelineStage.tsx",[],"D:\\Learning\\timelineproject\\src\\TimelineProperty.tsx",["27","28","29"],"import Konva from \"konva\";\r\nimport { Group } from \"konva/types/Group\";\r\nimport { KonvaEventObject, Node } from \"konva/types/Node\"\r\nimport React, { Component, RefObject } from 'react'\r\nimport { Rect, Shape } from \"react-konva\"\r\nimport { IKeyframe, ISingleMappedRef } from \"./TimelineStage\";\r\n\r\ninterface TimelinePropertyProps\r\n{\r\n  handlePropertyDragEnd: (e: KonvaEventObject<DragEvent>, index: number, secondIndex: number) => void;\r\n  propertyIndex: number;\r\n  second: IKeyframe;\r\n  secondIndex: number;\r\n  zoom: number;\r\n  minPixelsInSecond: number;\r\n  leftCanvasMargin: number;\r\n  minPropertyYPos: number;\r\n  curveLineRef: RefObject<Konva.Line>;\r\n  //nextKeyframe?: IKeyframe;\r\n  //nextKeyframeId?: Node;\r\n  id: string;\r\n  //groupArr: any[];\r\n\r\n  currentKeyframe: ISingleMappedRef | null;\r\n  nextKeyframe: ISingleMappedRef | null;\r\n  prevKeyframe: ISingleMappedRef | null;\r\n\r\n  stageRef: React.RefObject<Konva.Stage>;\r\n\r\n  keyframeGroupRef: RefObject<Konva.Group>;\r\n}\r\n\r\nexport default class TimelineProperty extends Component<TimelinePropertyProps> {\r\n\r\n  private keyframeRef: RefObject<Konva.Rect> = React.createRef();\r\n  private control1: RefObject<Konva.Rect> = React.createRef();\r\n  private control2: RefObject<Konva.Rect> = React.createRef();\r\n\r\n\r\n  state = {\r\n    x: 0,\r\n    y: 0, ref: null\r\n  }\r\n\r\n\r\n  private handleDragMove2 = (e: KonvaEventObject<DragEvent>) =>\r\n  {\r\n    console.log(\"e.target.getPosition()\", e.target.getPosition())\r\n    console.log(\"e.target.getAbsolutePosition()\", e.target.getAbsolutePosition())\r\n    console.log(\"{ x: e.target.x(), y: e.target.y() }\", { x: e.target.x(), y: e.target.y() })\r\n  }\r\n\r\n  //@ts-ignore\r\n//   private calculateBezier = (p0, p1, p2, p3, t) => {\r\n//     var ret = {};\r\n//     var coords = ['x', 'y'];\r\n//     var i, k;\r\n\r\n//     for (i in coords) {\r\n//         k = coords[i];\r\n//         //@ts-ignore\r\n//         ret[k] = Math.pow(1 - t, 3) * p0[k] + 3 * Math.pow(1 - t, 2) * t * p1[k] + 3 * (1 - t) * Math.pow(t, 2) * p2[k] + Math.pow(t, 3) * p3[k];\r\n//     }\r\n\r\n//     return ret;\r\n// }\r\n\r\n  private calculateHandlePosition()\r\n  {\r\n    const { currentKeyframe, nextKeyframe } = this.props;\r\n\r\n    if (!currentKeyframe || !nextKeyframe)\r\n      return 0;\r\n\r\n    const currentXPos: number = currentKeyframe?.ref.current?.x() ?? 0;\r\n    const difference: number = (nextKeyframe?.ref.current?.x() ?? 0) - currentXPos;\r\n\r\n    // return currentXPos + (difference * currentKeyframe.handles.c1)\r\n    console.log(currentKeyframe.id)\r\n\r\n    return currentXPos;\r\n  }\r\n\r\n  private onRefChange = (node: Konva.Rect | null) =>\r\n  {\r\n    const { currentKeyframe, stageRef } = this.props\r\n\r\n\r\n      //@ts-ignore\r\n    currentKeyframe.ref = node;\r\n\r\n    console.log(\"REF CHANGED\")\r\n\r\n    this.setState({ ref: currentKeyframe?.ref ?? null })\r\n    stageRef.current?.draw()\r\n  }\r\n\r\n  render()\r\n  {\r\n    const { handlePropertyDragEnd, propertyIndex, secondIndex, second, minPixelsInSecond, nextKeyframe, zoom, id, currentKeyframe, prevKeyframe, } = this.props;\r\n    console.log(currentKeyframe?.ref ?? 0)\r\n\r\n    return (\r\n      <>\r\n        {\r\n          this.state.ref && nextKeyframe && (\r\n            <Shape\r\n              stroke={'yellow'}\r\n              strokeWidth={1}\r\n              offsetX={-10}\r\n              offsetY={10}\r\n              sceneFunc={(ctx, shape) =>\r\n              {\r\n                ctx.beginPath();\r\n                // @ts-ignore\r\n                ctx.moveTo(currentKeyframe?.ref?.x() ?? 0, currentKeyframe?.ref.y() ?? 0);\r\n                ctx.bezierCurveTo(\r\n                  // @ts-ignore\r\n                  currentKeyframe?.c2Ref.current.getPosition().x,\r\n                  // @ts-ignore\r\n                  currentKeyframe?.c2Ref.current.getPosition().y,\r\n                  // @ts-ignore\r\n                  nextKeyframe?.c1Ref.current.getPosition().x,\r\n                  // @ts-ignore\r\n                  nextKeyframe?.c1Ref.current.getPosition().y,\r\n                  // @ts-ignore\r\n                  nextKeyframe.ref.getPosition().x,\r\n                  // @ts-ignore\r\n                  nextKeyframe.ref.getPosition().y\r\n                );\r\n                 // @ts-ignore\r\n                console.log(nextKeyframe.ref.getPosition().x, \"sdsad\")\r\n                // @ts-ignore\r\n                //ctx.lineTo(this.state.ref.getPosition().x, this.state.ref.getPosition().x)\r\n\r\n                ctx.fillStrokeShape(shape);\r\n\r\n\r\n                // console.log(this.calculateHandlePosition())\r\n\r\n                // const res: any = this.calculateBezier(\r\n                //   {x: this.keyframeRef?.current?.x(), y: this.keyframeRef?.current?.y()},\r\n                //   {x: this.control1.current?.x() ?? 0, y: this.control1.current?.y() ?? 0},\r\n                //   {x: this.control2.current?.x() ?? 0, y: this.control2.current?.y() ?? 0},\r\n                //   {x: groupArr[propertyIndex][secondIndex + 1]?.keyframeRef?.current?.getPosition().x ?? 0, y: groupArr[propertyIndex][secondIndex + 1]?.keyframeRef?.current?.getPosition().y ?? 0},\r\n                //   0.01,\r\n                // );\r\n\r\n                // this.setState({ x: res.x, y: res.y })\r\n              }}\r\n            />\r\n          )\r\n        }\r\n      {/* <Rect\r\n          ref={this.keyframeRef}\r\n          x={this.state.x}\r\n          offsetX={20}\r\n          offsetY={5}\r\n          y={this.state.y}\r\n          width={10} height={10}\r\n          fill=\"pink\"\r\n        /> */}\r\n\r\n        <Rect\r\n          ref={this.onRefChange}\r\n          draggable\r\n          onDragEnd={(e: KonvaEventObject<DragEvent>) => handlePropertyDragEnd(e, propertyIndex, secondIndex)}\r\n          onDragMove={() => {\r\n            // @ts-ignore\r\n            currentKeyframe?.c1Ref.current.x((currentKeyframe?.ref.x() ?? 0) - 30)\r\n            // @ts-ignore\r\n            currentKeyframe?.c1Ref.current.y((currentKeyframe?.ref.y() ?? 0) ?? 0)\r\n\r\n            // @ts-ignore\r\n            currentKeyframe?.c2Ref.current.x((currentKeyframe?.ref.x() ?? 0) + 30)\r\n            // @ts-ignore\r\n            currentKeyframe?.c2Ref.current.y((currentKeyframe?.ref.y() ?? 0) ?? 0)\r\n\r\n            console.log(\"CURRENT\", currentKeyframe)\r\n            console.log(\"PREV\", prevKeyframe)\r\n            console.log(\"NEXT\", nextKeyframe)\r\n          }}\r\n          dragBoundFunc={(pos) => ({ x: pos.x, y: pos.y })}\r\n          x={(second.second * (minPixelsInSecond * zoom))}\r\n          offsetX={20}\r\n          offsetY={5}\r\n          y={200 - (second.value * 50) + 10}\r\n          width={10} height={10}\r\n          fill=\"red\"\r\n          rotation={135}\r\n          id={id}\r\n        />\r\n\r\n        {this.state.ref && (\r\n          <Rect\r\n          ref={currentKeyframe?.c1Ref}\r\n          draggable\r\n\r\n          // onDragMove={() => this.control1.current?.x(keyframeGroupRef.current?.findOne(`#${id}`)?.x() ?? 0)}\r\n          // dragBoundFunc={(pos) => ({ x: pos.x, y: pos.y })}\r\n        // @ts-ignore\r\n          x={(currentKeyframe.ref.x() ?? 0) - 30}\r\n          offsetX={10}\r\n          offsetY={0}\r\n           // @ts-ignore\r\n          y={(currentKeyframe.ref.y() ?? 0)}\r\n          width={10} height={10}\r\n          fill=\"blue\"\r\n          rotation={135}\r\n          id={id}\r\n        />\r\n        )}\r\n        {this.state.ref && (\r\n          <Rect\r\n          ref={currentKeyframe?.c2Ref}\r\n            draggable\r\n            // onDragEnd={(e: KonvaEventObject<DragEvent>) => handlePropertyDragEnd(e, propertyIndex, secondIndex)}\r\n            \r\n            // dragBoundFunc={(pos) => ({ x: pos.x, y: pos.y })}\r\n            // @ts-ignore\r\n            x={(currentKeyframe.ref.x() ?? 0) + 30}\r\n            \r\n            offsetY={0}\r\n            y={200 - (second.value * 50) + 10}\r\n            width={10} height={10}\r\n            fill=\"green\"\r\n            rotation={135}\r\n            id={id}\r\n          />\r\n        )}\r\n        \r\n\r\n      </>\r\n    )\r\n  }\r\n}\r\n","D:\\Learning\\timelineproject\\src\\Play.tsx",["30"],"/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useState, useEffect } from \"react\";\n\nlet test: any;\n\nconst Play = () =>\n{\n  const [count, setCount] = React.useState(0);\n  const [active, setActive] = React.useState(false);\n\n  React.useLayoutEffect(() =>\n  {\n    const currPosition: number = count;\n\n    if (active)\n    {\n      let handler: any;\n\n      const currTime = new Date().getTime();\n\n      const animate = (_: number, currTime: number, currPos: number) =>\n      {\n\n        const runtime = new Date().getTime() - currTime;\n        const progress = (runtime / 1000) * 1;\n        \n        console.log(currPosition)\n        setCount((prev) => currPosition + 200 * progress);\n\n        handler = requestAnimationFrame((timestamp) => animate(timestamp, currTime, currPos));\n      };\n\n      handler = requestAnimationFrame((timestamp) => animate(timestamp, currTime, currPosition));\n\n      return () => cancelAnimationFrame(handler)\n    }\n\n\n  }, [active]);\n\n  return (\n    <div style={{ position: \"relative\" }}>\n      <div style={{ display: \"flex\" }}>\n        {Array.from(Array(10).keys()).map((i) => (\n          <div\n            style={{\n              transform: `translateX(${i * 200}px)`,\n              width: 1,\n              backgroundColor: \"red\",\n              height: 100\n            }}\n          ></div>\n        ))}\n        <div\n          style={{\n            transform: `translateX(${count}px)`,\n            width: 1,\n            backgroundColor: \"blue\",\n            height: 100,\n            left: 0,\n            position: \"absolute\"\n          }}\n        ></div>\n      </div>\n      <button onClick={() => setActive(true)}>start</button>\n      <button onClick={() => setActive(false)}>start</button>\n      {active ? \"TRUE\" : \"FALSE\"}\n    </div>\n  );\n};\n\nexport default Play;\n",{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":2,"column":10,"nodeType":"37","messageId":"38","endLine":2,"endColumn":15},{"ruleId":"35","severity":1,"message":"39","line":3,"column":28,"nodeType":"37","messageId":"38","endLine":3,"endColumn":32},{"ruleId":"35","severity":1,"message":"40","line":76,"column":11,"nodeType":"37","messageId":"38","endLine":76,"endColumn":29},{"ruleId":"41","severity":1,"message":"42","line":39,"column":6,"nodeType":"43","endLine":39,"endColumn":14,"suggestions":"44"},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"@typescript-eslint/no-unused-vars","'Group' is defined but never used.","Identifier","unusedVar","'Node' is defined but never used.","'difference' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useLayoutEffect has a missing dependency: 'count'. Either include it or remove the dependency array.","ArrayExpression",["47"],"no-global-assign","no-unsafe-negation",{"desc":"48","fix":"49"},"Update the dependencies array to be: [active, count]",{"range":"50","text":"51"},[968,976],"[active, count]"]